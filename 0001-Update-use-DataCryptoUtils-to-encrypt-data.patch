From 354ee4cb92b910efb15f680d31b9bba842cf8821 Mon Sep 17 00:00:00 2001
From: Azalea <azalea.pan@brahmaos.io>
Date: Tue, 4 Sep 2018 18:09:07 +0800
Subject: [PATCH] [Update]: use DataCryptoUtils to encrypt data

Change-Id: I969954e82ade95440bca989d78142a3964709529
Signed-off-by: Azalea <azalea.pan@brahmaos.io>
---
 src/io/brahmaos/setupwizard/WizardApplication.java |  16 ++--
 src/io/brahmaos/setupwizard/util/AES128.java       | 100 ---------------------
 src/io/brahmaos/setupwizard/util/BrahmaConst.java  |   4 -
 3 files changed, 9 insertions(+), 111 deletions(-)
 delete mode 100644 src/io/brahmaos/setupwizard/util/AES128.java

diff --git a/src/io/brahmaos/setupwizard/WizardApplication.java b/src/io/brahmaos/setupwizard/WizardApplication.java
index 9c67c92..0c5e773 100644
--- a/src/io/brahmaos/setupwizard/WizardApplication.java
+++ b/src/io/brahmaos/setupwizard/WizardApplication.java
@@ -6,7 +6,6 @@ import android.content.Context;
 import android.os.UserHandle;
 import android.os.UserManager;
 
-import io.brahmaos.setupwizard.util.AES128;
 import io.brahmaos.setupwizard.util.SHAEncrypt;
 import io.brahmaos.setupwizard.util.BLog;
 import io.brahmaos.setupwizard.util.BrahmaConst;
@@ -20,6 +19,7 @@ import java.util.Date;
 import java.util.List;
 
 import android.support.annotation.Nullable;
+import android.util.DataCryptoUtils;
 import android.util.Log;
 
 import com.google.common.base.Splitter;
@@ -47,6 +47,7 @@ public class WizardApplication extends Application {
     private StatusBarManager mStatusBarManager;
     private UserManager mUserManager;
     private int mUserId;
+    private DataCryptoUtils mDc;
 
     @Override
     public void onCreate() {
@@ -61,6 +62,7 @@ public class WizardApplication extends Application {
         mUserManager = (UserManager) getSystemService(USER_SERVICE);
 
         mUserId = UserHandle.myUserId();
+        mDc = new DataCryptoUtils();
     }
 
     @Override
@@ -105,17 +107,17 @@ public class WizardApplication extends Application {
             mUserManager.setUserName(mUserId, name);
 
             //save wallet address
-            result = handleSaveWalletAddressForPath(mnemonics, name, BrahmaConst.ETH_PATH);
+            result = handleSaveWalletAddressForPath(mnemonics, name, DataCryptoUtils.ETH_PATH);
             if (!result) {
                 return false;
             }
-            //result = handleSaveWalletAddressForPath(mnemonics, name, BrahmaConst.BRM_PATH);
+            //result = handleSaveWalletAddressForPath(mnemonics, name, DataCryptoUtils.BRM_PATH);
             //if (!result) {
             //    return false;
             //}
 
             //save encrypted mnemonics
-            String mnemonicHex = AES128.encrypt(mnemonics, password);
+            String mnemonicHex = mDc.aes128Encrypt(mnemonics, password);
             if (null == mnemonicHex) {
                 return false;
             }
@@ -126,16 +128,16 @@ public class WizardApplication extends Application {
             mUserManager.setUserBrahmaAccount(mUserId, brahmaAccount);
 
             //save data encrypt key pair
-            ECKeyPair defaultKeyPair = getECKeyPairForPath(mnemonics, BrahmaConst.DEFAULT_PATH);
+            ECKeyPair defaultKeyPair = getECKeyPairForPath(mnemonics, DataCryptoUtils.DEFAULT_PATH);
             if (null == defaultKeyPair) {
                 return false;
             }
             BigInteger privateKey = defaultKeyPair.getPrivateKey();
             BigInteger publicKey = defaultKeyPair.getPublicKey();
-            mUserManager.setUserDefaultPublicKey(mUserId, publicKey.toString());
+            mUserManager.setUserDefaultPublicKey(mUserId, publicKey.toString(16));
 
             //encrypt the private key before saving it
-            String privateEncrypt = AES128.encrypt(privateKey.toString(), password);
+            String privateEncrypt = mDc.aes128Encrypt(privateKey.toString(16), password);
             if (null == privateEncrypt) {
                 return false;
             }
diff --git a/src/io/brahmaos/setupwizard/util/AES128.java b/src/io/brahmaos/setupwizard/util/AES128.java
deleted file mode 100644
index cba761a..0000000
--- a/src/io/brahmaos/setupwizard/util/AES128.java
+++ /dev/null
@@ -1,100 +0,0 @@
-package io.brahmaos.setupwizard.util;
-
-import java.security.SecureRandom;
-import java.security.spec.KeySpec;
-
-import javax.crypto.Cipher;
-import javax.crypto.KeyGenerator;
-import javax.crypto.SecretKey;
-import javax.crypto.SecretKeyFactory;
-import javax.crypto.spec.PBEKeySpec;
-import javax.crypto.spec.SecretKeySpec;
-
-public class AES128 {
-    private static byte[] salt = new String("12345678").getBytes();
-    private static int iterationCount = 1024;
-    private static int keyStrength = 128;
-    /**
-     * Encrypt
-     *
-     * @param content the clear text which want to be encrypted.
-     * @param password the secret key
-     *
-     * @return the encrypted hex string
-     */
-    public static String encrypt(String content, String password) {
-
-        try {
-            Cipher cipher = Cipher.getInstance("AES");
-            cipher.init(Cipher.ENCRYPT_MODE, genKey(password));
-            byte[] result = cipher.doFinal(content.getBytes());
-            return parseByte2HexStr(result);
-        } catch (Exception e) {
-            e.printStackTrace();
-        }
-        return null;
-
-    }
-
-    /**
-     * Decrypt
-     *
-     * @param
-     * @return
-     */
-    public static String decrypt(String content, String password) {
-
-        try {
-            byte[] decryptFrom = parseHexStr2Byte(content);
-            Cipher cipher = Cipher.getInstance("AES");
-            cipher.init(Cipher.DECRYPT_MODE, genKey(password));
-            byte[] result = cipher.doFinal(decryptFrom);
-            return new String(result);
-        } catch (Exception e) {
-            e.printStackTrace();
-        }
-        return null;
-    }
-
-    /**
-     * get SecretKeySpec according to the password
-     * @return
-     */
-    private  static SecretKeySpec genKey(String password){
-        try {
-            SecretKeyFactory factory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA1");
-            KeySpec spec = new PBEKeySpec(password.toCharArray(), salt, iterationCount, keyStrength);
-            SecretKey tmp = factory.generateSecret(spec);
-            SecretKeySpec key = new SecretKeySpec(tmp.getEncoded(), "AES");
-            return key;
-        } catch (Exception e) {
-            e.printStackTrace();
-        }
-        return null;
-    }
-
-
-    private static String parseByte2HexStr(byte buf[]) {
-        StringBuffer sb = new StringBuffer();
-        for (int i = 0; i < buf.length; i++) {
-            String hex = Integer.toHexString(buf[i] & 0xFF);
-            if (hex.length() == 1) {
-                hex = '0' + hex;
-            }
-            sb.append(hex.toUpperCase());
-        }
-        return sb.toString();
-    }
-
-    private static byte[] parseHexStr2Byte(String hexStr) {
-        if (hexStr.length() < 1)
-            return null;
-        byte[] result = new byte[hexStr.length() / 2];
-        for (int i = 0; i < hexStr.length() / 2; i++) {
-            int high = Integer.parseInt(hexStr.substring(i * 2, i * 2 + 1), 16);
-            int low = Integer.parseInt(hexStr.substring(i * 2 + 1, i * 2 + 2),16);
-            result[i] = (byte) (high * 16 + low);
-        }
-        return result;
-    }
-}
\ No newline at end of file
diff --git a/src/io/brahmaos/setupwizard/util/BrahmaConst.java b/src/io/brahmaos/setupwizard/util/BrahmaConst.java
index 12ccb43..b8c410d 100644
--- a/src/io/brahmaos/setupwizard/util/BrahmaConst.java
+++ b/src/io/brahmaos/setupwizard/util/BrahmaConst.java
@@ -11,8 +11,4 @@ public class BrahmaConst {
     public static final String PRIVACY_POLICY_PATH_EN = "https://wallet.apps.brahmaos.io/help/privacy_policy_en.html";
     public static final String SERVICE_PATH_ZH = "https://wallet.apps.brahmaos.io/help/service_zh.html";
     public static final String SERVICE_PATH_EN = "https://wallet.apps.brahmaos.io/help/service_en.html";
-
-    public static final String ETH_PATH = "M/44H/60H/0H/0/0";
-    public static final String BRM_PATH = "M/44H/60H/0H/0/1";
-    public static final String DEFAULT_PATH = "M/44H/1024H/0H/0/0";
 }
-- 
2.7.4

